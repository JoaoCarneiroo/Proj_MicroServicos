/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegistarImport } from './routes/registar'
import { Route as PerfilImport } from './routes/perfil'
import { Route as LoginImport } from './routes/login'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const RegistarRoute = RegistarImport.update({
  id: '/registar',
  path: '/registar',
  getParentRoute: () => rootRoute,
} as any)

const PerfilRoute = PerfilImport.update({
  id: '/perfil',
  path: '/perfil',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/perfil': {
      id: '/perfil'
      path: '/perfil'
      fullPath: '/perfil'
      preLoaderRoute: typeof PerfilImport
      parentRoute: typeof rootRoute
    }
    '/registar': {
      id: '/registar'
      path: '/registar'
      fullPath: '/registar'
      preLoaderRoute: typeof RegistarImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/perfil': typeof PerfilRoute
  '/registar': typeof RegistarRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/perfil': typeof PerfilRoute
  '/registar': typeof RegistarRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/perfil': typeof PerfilRoute
  '/registar': typeof RegistarRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login' | '/perfil' | '/registar'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/perfil' | '/registar'
  id: '__root__' | '/' | '/login' | '/perfil' | '/registar'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  PerfilRoute: typeof PerfilRoute
  RegistarRoute: typeof RegistarRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  PerfilRoute: PerfilRoute,
  RegistarRoute: RegistarRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/",
        "/login",
        "/perfil",
        "/registar"
      ]
    },
    "/": {
      "filePath": "index.jsx"
    },
    "/login": {
      "filePath": "login.jsx"
    },
    "/perfil": {
      "filePath": "perfil.jsx"
    },
    "/registar": {
      "filePath": "registar.jsx"
    }
  }
}
ROUTE_MANIFEST_END */
